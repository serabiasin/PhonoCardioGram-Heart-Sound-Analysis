# -*- coding: utf-8 -*-
"""Wavelet Data Load Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11nG2wGvQBM8CkMzfxA8IY1_NB1t5Rin4
"""

import tensorflow as tf, tensorflow.keras.backend as K
import tensorflow_addons as tfa
from sklearn.preprocessing import LabelEncoder

class DataGenerator(tf.keras.utils.Sequence):
    'Generates data for Keras'
    def __init__(self, listpath, labels, batch_size=32, n_channels=1,
                 n_classes=10, shuffle=True):
        'Initialization'
        self.batch_size = batch_size
        self.labels = labels
        self.listpath = listpath
        self.n_channels = n_channels
        self.n_classes = n_classes
        self.shuffle = shuffle
        self.on_epoch_end()

    def __len__(self):
        'Denotes the number of batches per epoch'
        return int(np.floor(len(self.listpath) / self.batch_size))

    def __getitem__(self, index):
        'Generate one batch of data'
        # Generate indexes of the batch
        indexes = self.indexes[index*self.batch_size:(index+1)*self.batch_size]

        # Find list of IDs
        listpath_temp = [self.listpath[k] for k in indexes]

        # Generate data
        X, y = self.__data_generation(listpath_temp)

        return X, y

    def on_epoch_end(self):
        'Updates indexes after each epoch'
        self.indexes = np.arange(len(self.listpath))
        if self.shuffle == True:
            np.random.shuffle(self.indexes)

    def __data_generation(self, listpath_temp):
        'Generates data containing batch_size samples' # X : (n_samples, *dim, n_channels)
        # Initialization
        scale=np.arange(1,64)
        X = []
        y = np.empty((self.batch_size), dtype=int)

        # Generate data
        for i, path in enumerate(listpath_temp):
            # Store sample

            x,sr=librosa.load(path,sr=None)
            x=x[:sr*5]
            x=librosa.resample(x, sr, 100)
            Motherwavelet=pywt.ContinuousWavelet('gaus4')
            [coefficient,freq]=pywt.cwt(x,scale,wavelet=Motherwavelet)
            X+=[coefficient]

            # Store class
            y[i] = self.labels[i]
        encoder = LabelEncoder()
        encoder.fit(y)
        encoded_Y = encoder.transform(y)
        return (np.reshape(np.array(X),(-1,63, 500,1)),encoded_Y)